@inject IHandlingStudentsApi handlingStudentsApi
@rendermode InteractiveServer

@if (!hasrender)
{
    <div class="flex justify-center items-center py-32">
        <div class="text-center">
            <div class="relative">
                <div class="w-20 h-20 border-4 border-cyan-200 border-t-cyan-600 rounded-full animate-spin mx-auto"></div>
            </div>
            <p class="text-gray-600 mt-6 text-lg font-semibold">Loading students...</p>
        </div>
    </div>
}

@if (studentsDetailsDto is not null)
{
    <div class="flex-1  pb-18" style="background: linear-gradient(135deg, #f0fdfa 0%, #ecfeff 100%);">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-2">
            @foreach (var student in studentsDetailsDto)
            {


                <NavLink href="@($"facultyviewtudents/{student.StudentId}")" class="bg-white rounded-lg shadow-sm border border-cyan-100 p-3 hover:shadow-md transition-all hover:border-cyan-300">
                    <div class="flex items-start justify-between mb-2">
                        <div class="flex items-center gap-2">

                            <div class="w-10 h-10  rounded-lg flex items-center justify-center text-white font-bold text-xs" style="background-color: @student.ProfileColor;">
                                @(
                                    student.StudentName.Split(' ').Length >= 2
                                    ? $"{student.StudentName.Split(' ')[0][0]}{student.StudentName.Split(' ')[1][0]}"
                                    : student.StudentName[0].ToString())
                            </div>


                            <div>
                                <p class="text-xs font-semibold text-gray-800">@student.StudentName</p>
                                <p class="text-[10px] text-gray-500">@student.StudentSchoolId</p>
                            </div>
                        </div>
                        <span class="px-2 py-0.5 rounded-full text-[9px] font-semibold   border  @(student.studentCourseStatus == StudentCourseStatus.Inactive ? "border-amber-200  bg-amber-50 text-amber-600" : " bg-emerald-50 border-emerald-200  text-emerald-700")">
                            @student.studentCourseStatus?.GetDisplayName()
                        </span>
                    </div>
                    <div class="flex justify-between">
                        <div class="space-y-1">
                            <p class="text-[10px] text-gray-600 truncate">@student.Email</p>
                            <p class="text-[10px] text-gray-700 font-medium">@student.CourseTitle</p>
                        </div>
                        <span class="text-[10px]  mt-5 text-gray-700">@student.DateEnrolled.ToString("MMMM dd, yyyy")</span>
                    </div>
                </NavLink>
            }
        </div>



    </div>
}








@code {
    private List<RandomColor>? randomcolor { get; set; }
    private bool hasrender = false;
    public List<HandlingStudentsDto>? studentsDetailsDto { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!hasrender && firstRender)
        {
            hasrender = true;
            studentsDetailsDto = await handlingStudentsApi.DisplayStudentsAsync();
        }
        StateHasChanged();
    }

}
