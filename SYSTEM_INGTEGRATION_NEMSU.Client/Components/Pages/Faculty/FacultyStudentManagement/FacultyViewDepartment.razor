@page "/viewdepartment/{DepartmentParam}"
@inject IHandlingStudentsApi handlingStudentsApi
@rendermode InteractiveServer

<div class="relative h-screen content overflow-hidden">
    <div class="drawer lg:drawer-open h-screen">
        <input id="my-drawer-2" type="checkbox" class="drawer-toggle" />
        <div class="drawer-content flex flex-col h-screen overflow-auto scrollbar-hide">
            <label for="my-drawer-2" class="btn btn-primary drawer-button lg:hidden m-4">
                Open drawer
            </label>
            @if (!Hasrender)
            {
                <div class="flex justify-center items-center py-32">
                    <div class="text-center">
                        <div class="relative">
                            <div class="w-20 h-20 border-4 border-cyan-200 border-t-cyan-600 rounded-full animate-spin mx-auto"></div>
                        </div>
                        <p class="text-gray-600 mt-6 text-lg font-semibold">Loading students...</p>
                    </div>
                </div>
            }
          
           
            @if (ListStudent is not null && ListStudent.Any())
            {
                <div class="flex-1 p-8 pb-18" style="background: linear-gradient(135deg, #f0fdfa 0%, #ecfeff 100%);">


                    <div class="mb-8">
                        <div>
                            <NavLink href="/studentmanagement" class="inline-flex items-center gap-2 text-cyan-600 hover:text-cyan-700  font-semibold text-sm mb-4">
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                                </svg>
                                Back to Department
                            </NavLink>
                        </div>

                        @foreach (var student in ListStudent.Take(1))
                        {
                            <div class="mb-5">
                                <h1 class="text-2xl font-bold text-cyan-700 mb-0.5">@student.Coursedepartment.GetDisplayName()</h1>
                                <p class="text-gray-500 text-xs">All enrolled students of the @student.Coursedepartment.GetDisplayName()</p>
                            </div>
                        }

                        <div class="max-w-xl">
                            <div class="relative">
                                <input type="text"
                                placeholder="Search students..."
                                class="input input-bordered w-full pl-12 pr-4 py-3 bg-white shadow-md rounded-xl border-gray-200 focus:border-cyan-500 focus:ring-2 focus:ring-cyan-200 transition-all" />
                                <svg class="w-5 h-5 absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                                </svg>
                            </div>
                        </div>
                    </div>


                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                        @foreach (var student in ListStudent)
                        {
                            <div class="bg-white rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 overflow-hidden border border-gray-100">
                                <div class="h-24 bg-gradient-to-r from-cyan-500 to-teal-500 relative p-4 flex items-center justify-between">
                                    <div class="text-white">
                                        <h3 class="text-lg font-bold">@student.StudentName</h3>
                                        <p class="text-sm opacity-90">@student.StudentSchoolId</p>
                                    </div>
                                    <div class="w-14 h-14 rounded-full bg-white/20 backdrop-blur-sm flex items-center justify-center">
                                        <span class="text-xl font-bold text-white">
                                            @(student.StudentName.Split(' ').Length >= 2
                                                        ? $"{student.StudentName.Split(' ')[0][0]}{student.StudentName.Split(' ')[1][0]}"
                                                        : student.StudentName[0].ToString())
                                        </span>
                                    </div>
                                </div>

                                <div class="p-5">
                                    <div class="space-y-2 mb-3">
                                        <div class="flex items-center gap-2 text-gray-600 text-xs">
                                            <svg class="w-4 h-4 text-gray-400 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                                            </svg>
                                            <span class="truncate">@student.CourseTitle</span>
                                        </div>

                                        <div class="flex items-center gap-2 text-gray-600 text-xs">
                                            <svg class="w-4 h-4 text-gray-400 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                                            </svg>
                                            <span class="truncate">@student.Email</span>
                                        </div>

                                        <div class="flex items-center gap-2 text-gray-600 text-xs">
                                            <svg class="w-4 h-4 text-gray-400 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                            </svg>
                                            <span>@student.DateEnrolled.ToString("MMM dd, yyyy")</span>
                                        </div>
                                    </div>

                                    <div class="pt-3 border-t border-gray-100">
                                        <span class="inline-block px-2.5 py-1 rounded-full text-xs font-semibold   @(student.studentCourseStatus == StudentCourseStatus.Inactive ? "text-amber-700 bg-amber-100" : "text-green-700 bg-green-100")">
                                            @(student.studentCourseStatus?.ToString() ?? "Unknown")
                                        </span>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                </div>
            }
            else
            {
                <div class="flex-1 p-8" style="background: linear-gradient(135deg, #f0fdfa 0%, #ecfeff 100%);">
                    <div class="mb-8">
                        <NavLink href="/studentmanagement" class="inline-flex items-center gap-2 text-cyan-600 hover:text-cyan-700 font-semibold text-sm mb-4">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                            </svg>
                            Back to Department
                        </NavLink>
                    </div>

                    <div class="flex items-center justify-center min-h-[calc(100vh-200px)]">
                        <div class="text-center max-w-md">
                            <div class="mb-6 inline-block p-6 bg-gradient-to-br from-cyan-100 to-teal-100 rounded-full">
                                <svg class="w-24 h-24 text-cyan-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                                </svg>
                            </div>
                            <h2 class="text-3xl font-bold text-gray-800 mb-3">No Students Enrolled</h2>
                            <p class="text-gray-500 text-lg mb-2">@department.GetDisplayName()</p>
                            <p class="text-gray-400 text-sm mb-6">This department doesn't have any enrolled students yet.</p>
                            <div class="bg-white rounded-xl p-6 shadow-md border border-gray-100">
                                <p class="text-sm text-gray-600">Students will appear here once they enroll in courses from this department.</p>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="drawer-side">
            <label for="my-drawer-2" aria-label="close sidebar" class="drawer-overlay"></label>
            <ul class="menu min-h-full w-62 p-4 text-white" style="background: radial-gradient(at 0% 0%, rgb(6, 182, 212) 0px, transparent 50%), radial-gradient(at 100% 100%, rgb(14, 116, 144) 0px, transparent 50%), radial-gradient(at 100% 0%, rgb(8, 145, 178) 0px, transparent 50%), radial-gradient(at 0% 100%, rgb(21, 94, 117) 0px, transparent 50%), rgb(17, 24, 39);">
                <li class="mx-auto mb-4">
                    <div class="w-[92px] h-[92px] bg-gradient-to-br from-amber-50 to-amber-50 rounded-full flex items-center justify-center border-4 border-orange-300 shadow-lg">
                        <svg class="w-13 h-13 text-amber-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                        </svg>
                    </div>
                </li>
                <li><a class="text-white text-2xl font-light btn btn-outline btn-dash btn-primary">Student Records</a></li>
                <li class="mt-10"><NavLink href="/studentinformation" class="text-white text-md btn-[40%] font-semibold btn btn-outline btn-primary">Student Information</NavLink></li>
                <li class="mt-2"><a class="text-white text-md btn-[40%] font-semibold btn btn-outline btn-primary">Settings</a></li>
                <li class="mt-2"><a class="text-white text-md btn-[40%] font-semibold btn btn-outline btn-primary">Logout</a></li>
                <li class="mt-10"><NavLink href="/coursemanagemnt" class="text-white text-md btn-[40%] font-semibold btn btn-outline btn-primary">Course Management</NavLink></li>
                <li class="mt-2"><NavLink href="/facultyannouncement" class="text-white text-md btn-[40%] font-semibold btn btn-outline btn-primary">Announcements</NavLink></li>
                <li class="mt-2"><NavLink href="/facultyprofile" class="text-white text-md btn-[40%] font-semibold btn btn-outline btn-primary">Profile</NavLink></li>
            </ul>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string? DepartmentParam { get; set; }
    public bool Hasrender = false;
    private CourseDepartment department;
    public bool Isload = false;
    private List<HandlingStudentsDto>? ListStudent { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!Hasrender && firstRender)
        {
            Hasrender = true;
      
            if (Enum.TryParse<CourseDepartment>(DepartmentParam, true, out var result))
            {
                department = result;
            }
            ListStudent = await handlingStudentsApi.DisplayStudentByDepartmentAsync(department);
            StateHasChanged();
        }
    }
}