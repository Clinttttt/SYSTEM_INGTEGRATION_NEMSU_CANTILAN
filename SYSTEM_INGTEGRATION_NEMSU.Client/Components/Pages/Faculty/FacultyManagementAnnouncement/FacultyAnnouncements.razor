@page "/facultyannouncement"
@using SYSTEM_INGTEGRATION_NEMSU.Client.Components.Pages.ModalRespond
@rendermode InteractiveServer
@inject IRespondApiCommand respondApiCommand
@inject IJSRuntime JS
<div class="relative h-screen w-screen content overflow-hidden animate-fade-in">
    <div class="drawer lg:drawer-open h-screen">
        <input id="my-drawer-2" type="checkbox" class="drawer-toggle" />
        <div class="drawer-content flex flex-col h-screen overflow-auto  scrollbar-hide">

            <label for="my-drawer-2" class="btn btn-primary drawer-button lg:hidden">
                Open drawer
            </label>

            <div class="mb-6 p-5">
                <div>
                    <NavLink href="/facultymainmenu" class="cursor-pointer inline-flex items-center gap-2 text-cyan-700 hover:text-cyan-700 font-semibold text-sm mb-4">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                        </svg>
                        Back to Menu
                    </NavLink>
                </div>
                <div class="flex justify-between ">
                    <div>
                        <h1 class="text-3xl font-bold bg-gradient-to-r from-cyan-600 to-teal-600 bg-clip-text text-transparent">Manage Announcements</h1>
                        <p class="text-gray-600 mt-2 flex items-center">
                            <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                            </svg>
                            Create and manage announcements for your students</p>
                    </div>
                    <div>
                        <button onclick="my_modal_create_announcement.showModal()" class="btn bg-teal-500 text-white gap-2  rounded-sm shadow-lg">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                            </svg>
                            Create Announcement
                        </button>
                    </div>
                </div>
            </div>

            <div class="max-w-5xl mx-auto space-y-6 -mt-10 p-5 pb-18">

                @if (!hasrender)
                {
                    <div class="flex justify-center items-center py-32">
                        <div class="text-center">
                            <div class="relative">
                                <div class="w-20 h-20 border-4 border-cyan-200 border-t-cyan-600 rounded-full animate-spin mx-auto"></div>
                            </div>
                            <p class="text-gray-600 mt-6 text-lg font-semibold">Loading Announcements...</p>
                        </div>
                    </div>
                }
                else
                {
                    @if (announcements is not null)
                    {
                        foreach (var announcemet in announcements)
                        {
                            <div class=" max-w-4xl lg:min-w-[60rem] grid grid-cols-2 lg:block bg-gradient-to-r from-cyan-500 to-teal-600 border-l-4 border-cyan-500 rounded-2xl shadow-xl p-6 hover:shadow-2xl transform hover:-translate-y-1 transition-all duration-300 relative">
                                <div class="flex justify-between items-start gap-4">
                                    <div class="flex-1">
                                        <div class="flex items-center gap-3 mb-2">
                                            <div class="-mt-2">
                                                <span class="text-white font-light text-sm"> @announcemet.CourseName</span>
                                            </div>
                                            <div class="-mt-2">
                                                <span class="text-white font-light text-sm"> @announcemet.DateCreated</span>
                                            </div>
                                            <div class="-mt-2">
                                                <span class="text-white font-light text-sm"> @announcemet.InformationType.GetDisplayName()</span>
                                            </div>
                                        </div>
                                        <h3 class="text-2xl font-semibold text-white mb-2">@announcemet.Title</h3>
                                        <p class="text-white font-normal  leading-relaxed">
                                            @announcemet.Message
                                        </p>
                                    </div>
                                    <div class=" gap-2 right-4 absolute">
                                        <button @onclick="()=> EditAnnouncement(announcemet)" class="btn bg-teal-600/90 text-white  btn-sm gap-2 shadow-md hover:shadow-lg transition-all">
                                            <svg class="w-4 h-4   " fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                            </svg>
                                            Edit
                                        </button>
                                        <button @onclick="()=> ShowDeleteModal(announcemet.AnnouncementId)" class="btn bg-teal-600/90  text-white btn-sm gap-2 shadow-md hover:shadow-lg transition-all">
                                            <svg class="w-4 h-4 " fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                            </svg>
                                            Delete
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                }


            </div>

            <FacultyEditAnnouncement announcements="editAnnouncement" AnnouncementUpdate="ReloadAnnouncement" />
            <DeleteAnnouncementRespond OnClickHandler="DeleteAnnouncement" />
            <FacultyCreateAnnouncements AnnouncementUpdate="ReloadAnnouncement" />
        </div>




        <div class="drawer-side">
            <label for="my-drawer-2" aria-label="close sidebar" class="drawer-overlay"></label>
            <ul class="menu min-h-full w-62 p-4 text-white" style="background: radial-gradient(at 0% 0%, rgb(6, 182, 212) 0px, transparent 50%), radial-gradient(at 100% 100%, rgb(14, 116, 144) 0px, transparent 50%), radial-gradient(at 100% 0%, rgb(8, 145, 178) 0px, transparent 50%), radial-gradient(at 0% 100%, rgb(21, 94, 117) 0px, transparent 50%), rgb(17, 24, 39);">

                <li class="mx-auto mb-4">


                    <div class="w-[92px] h-[92px] bg-gradient-to-br from-amber-50 to-amber-50 rounded-full flex items-center justify-center border-4 border-orange-300 shadow-lg">
                        <svg class="w-13 h-13 text-amber-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                        </svg>
                    </div>




                </li>
                <li><a class="text-white text-2xl font-light btn btn-outline btn-dash  btn-primary">Announcements</a></li>


                <li class="mt-10"><NavLink href="/createannouncement" class="text-white text-md btn-[40%] font-semibold btn btn-outline btn-primary">Create Announcement</NavLink></li>
                <li class="mt-2"><a class="text-white text-md btn-[40%] font-semibold btn btn-outline btn-primary">Settings</a></li>
                <li class="mt-2"><a class="text-white text-md btn-[40%] font-semibold btn btn-outline btn-primary">Logout</a></li>

                <li class="mt-10"><NavLink href="/studentmanagement" class="text-white text-md btn-[40%] font-semibold btn btn-outline btn-primary">Student Records</NavLink></li>
                <li class="mt-2"><NavLink href="/coursemanagemnt" class="text-white text-md btn-[40%] font-semibold btn btn-outline btn-primary">Course Management</NavLink></li>
                <li class="mt-2"><NavLink href="/facultyprofile" class="text-white text-md btn-[40%] font-semibold btn btn-outline btn-primary">Profile </NavLink></li>
            </ul>
        </div>
    </div>
</div>


@code {
    private bool hasrender = false;

    private DeleteAnnouncementRespond deleteAnnouncementModal = null!;


    public List<AnnouncementDto>? announcements { get; set; }

    private Guid deleteId;
    [Parameter]
    public EditAnnouncementDto editAnnouncement { get; set; } = new();
    public string? Error { get; set; }
    protected override  async Task OnAfterRenderAsync(bool firstRender)
    { 
        if(!hasrender && firstRender)
        {
            hasrender = true;
            await Task.Delay(500);
            announcements = await respondApiCommand.DisplayAnnouncementAsync();
            if(announcements is null)
            {
                Error = "No Announcement";
                return;
            }


        }
        StateHasChanged();


    }
    public async Task ShowDeleteModal(Guid id)
    {
        deleteId = id;
        await JS.InvokeVoidAsync("eval", "my_modal_announcement_delete.showModal()");
    }
    public async Task DeleteAnnouncement()
    {
        await respondApiCommand.DeleteAnnouncementAsync(deleteId);
        announcements = await respondApiCommand.DisplayAnnouncementAsync();
        StateHasChanged();
    }

    public async Task EditAnnouncement(AnnouncementDto announce)
    {
        editAnnouncement.AnnouncementId = announce.AnnouncementId;
        editAnnouncement.Title = announce.Title;
        editAnnouncement.Message = announce.Message;
        StateHasChanged();    
        await JS.InvokeVoidAsync("eval", "edit_announcement.showModal()");

    }
    public async Task ReloadAnnouncement()
    {
        announcements = await respondApiCommand.DisplayAnnouncementAsync();
        StateHasChanged();
    }
}
