@page "/facultylogin"
@using System.Security.Claims
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject IAuthApiServices authApi
@inject AuthStateProvider authState
@inject ProtectedLocalStorage storage
<div class="h-screen content overflow-hidden flex items-center justify-center p-4"
style="background: radial-gradient(at 0% 0%, rgb(6, 182, 212) 0px, transparent 50%), radial-gradient(at 100% 100%, rgb(14, 116, 144) 0px, transparent 50%), radial-gradient(at 100% 0%, rgb(8, 145, 178) 0px, transparent 50%), radial-gradient(at 0% 100%, rgb(21, 94, 117) 0px, transparent 50%), rgb(17, 24, 39);">
    <div class="w-full max-w-5xl flex rounded-3xl overflow-hidden shadow-2xl bg-white h-[90%]">


        <div class="hidden lg:flex lg:w-1/2 relative overflow-hidden  " style=" background-image: url('/img/faculty_nemsu.jpg'); background-size: cover; background-position: center; background-repeat: no-repeat;">
            <div class="absolute inset-0 bg-gradient-to-br from-cyan-500 to-teal-700 opacity-90"></div>

            <div class="relative z-10 flex flex-col items-center justify-center p-12 text-white">
                <div class="w-24 h-24 bg-white rounded-full flex items-center justify-center mb-6 shadow-lg">
                    <svg class="w-12 h-12 text-cyan-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                    </svg>
                </div>
                <h2 class="text-4xl font-bold mb-4 text-center">Faculty/Staff Portal</h2>
                <p class="text-center text-lg text-cyan-50 max-w-md">
                    Assist in managing enrollment, verifying student data, and overseeing academic records
                </p>
                <div class="mt-12 space-y-4 w-full max-w-sm">
                    <div class="flex items-center gap-3">
                        <div class="w-2 h-2 bg-white rounded-full"></div>
                        <p class="text-cyan-50">Manage student enrollment</p>
                    </div>
                    <div class="flex items-center gap-3">
                        <div class="w-2 h-2 bg-white rounded-full"></div>
                        <p class="text-cyan-50">Verify academic records</p>
                    </div>
                    <div class="flex items-center gap-3">
                        <div class="w-2 h-2 bg-white rounded-full"></div>
                        <p class="text-cyan-50">Access administrative tools</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Side  -->
        <div class="w-full lg:w-1/2 p-8 lg:p-10 flex items-center">
            <div class="max-w-md mx-auto w-full">
                <h3 class="text-3xl font-bold text-stone-700 mb-2">Welcome Back</h3>
                <p class="text-gray-600 mb-8">Sign in to access your faculty portal</p>

                <EditForm Model="@Login" OnValidSubmit="@HandleLogin" FormName="facultylogin">
                    <div class="space-y-5">

                        <div>
                            <label class="block text-sm font-semibold text-gray-700 mb-2">Email Address</label>
                            <div class="relative">
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"></path>
                                    </svg>
                                </div>
                                <input @bind="Login.UserName"
                                class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                                placeholder="faculty@university.edu" />
                            </div>
                        </div>


                        <div>
                            <label class="block text-sm font-semibold text-gray-700 mb-2">Password</label>
                            <div class="relative">
                                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                    <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                                    </svg>
                                </div>
                                <input type="@(showPassword ? "text" : "password")"
                                @bind="Login.Password"
                                class="w-full pl-10 pr-12 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                                placeholder="••••••••" />
                                <button type="button" @onclick="() => showPassword = !showPassword"
                                class="absolute inset-y-0 right-0 pr-3 flex items-center">
                                    @if (showPassword)
                                    {
                                        <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21"></path>
                                        </svg>
                                    }
                                    else
                                    {
                                        <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                        </svg>
                                    }
                                </button>
                            </div>
                        </div>


                        <div class="flex items-center justify-between">
                            <label class="flex items-center">
                                <input type="checkbox" class="w-4 h-4 text-cyan-600 border-gray-300 rounded focus:ring-cyan-500" />
                                <span class="ml-2 text-sm text-gray-600">Remember me</span>
                            </label>
                            <a href="#" class="text-sm text-cyan-600 hover:text-cyan-700 font-semibold">Forgot password?</a>
                        </div>


                        <button type="submit"
                        class="w-full bg-gradient-to-r from-cyan-500 to-teal-600 text-white py-3 rounded-lg font-semibold hover:from-cyan-600 hover:to-cyan-700 transition-all shadow-lg hover:shadow-xl">
                            Sign In
                        </button>


                        <div class="text-center ">
                            <p class="text-gray-600">
                                Don't have an account?
                                <a href="/facultyregister" class="text-cyan-600 hover:text-cyan-700 font-semibold">Register here</a>
                            </p>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginDto Login = new();
    private bool showPassword = false;
    private string? Error { get; set; }
    private IEnumerable<Claim> claims = [];
    private bool render = false;

    protected override  async Task OnInitializedAsync()
    {
        var state =  await authState.GetAuthenticationStateAsync();
        claims = state.User.Claims;
    }


    private async Task HandleLogin()
    {
        if(string.IsNullOrEmpty(Login.UserName) || string.IsNullOrEmpty(Login.Password))
        {
            Error = "Enter Username and Password";
            return;
        }
        var request = await authApi.LoginAsync(Login);
        if(request is null)
        {
            Error = "User Not Found";
            return;
        }
        await storage.SetAsync("AccessToken", request.AccessToken!);
        await storage.SetAsync("RefreshToken", request.RefreshToken!);
        await Task.Delay(100);
        authState.NotifyUserChanged();
        await Task.Delay(100);
        Navigation.NavigateTo("/facultyfillout");
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!render && firstRender)
        {
            render = true;
             await authApi.TryRefreshTokenAsync();
            StateHasChanged();
        }
    } 
}





















































@*@page "/loginfaculty"


@using SYSTEM_INGTEGRATION_NEMSU.Domain.DTOs
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@using SYSTEM_INGTEGRATION_NEMSU.Application.External

@using SYSTEM_INGTEGRATION_NEMSU.Infrastructure.Respositories

@inject IAuthApiServices authApiService
@inject ProtectedLocalStorage localStorage
@inject AuthStateProvider authProvider
@inject NavigationManager Navigation
@rendermode InteractiveServer
<h3>Login</h3>




<EditForm Model="@user" OnValidSubmit="HandleLogin" FormName="logins">


    <div>
        <label>Username</label><br />
        <input type="text" @bind="user.UserName" />
    </div>
    <div>
        <label>Password</label><br />
        <input type="password" @bind="user.Password" />
    </div>
    <button type="submit">Login</button>
</EditForm>

@if (!string.IsNullOrWhiteSpace(Error))
{
    <p class="text-danger">@Error</p>
}

@foreach (var claim in claims)
{
    <li><b>@claim.Type</b>: @claim.Value</li>

}

<CascadingAuthenticationState>
    <AuthorizeView>
        <Authorized>
            <p>hi</p>
        </Authorized>
        <NotAuthorized>
            <hello>hello</hello>
        </NotAuthorized>
    </AuthorizeView>
</CascadingAuthenticationState>

@code {
    private LoginDto user = new();
    private string? Error;
    private bool _hasRendered = false;
    private IEnumerable<Claim> claims = [];

    protected override async Task OnInitializedAsync()
    {
    var state = await authProvider.GetAuthenticationStateAsync();
    claims = state.User.Claims;
    }

    private async Task HandleLogin()
    {
    Error = null;

    if (string.IsNullOrWhiteSpace(user.UserName) || string.IsNullOrWhiteSpace(user.Password))
    {
    Error = "❌ Username and password are required.";
    return;
    }

    try
    {
    var result = await authApiService.LoginAsync(user);

    if (result is null)
    {
    Error = "❌ Invalid username or password.";
    return;
    }

    await localStorage.SetAsync("access_token", result.AccessToken!);
    await localStorage.SetAsync("refresh_token", result.RefreshToken!);

    await Task.Delay(100);
    authProvider.NotifyUserChanged();
    await Task.Delay(500); // gives time for state update
    Navigation.NavigateTo("/Menu", forceLoad: true);
    }
    catch (Exception ex)
    {
    Error = "❌ Login failed.";
    Console.WriteLine("Login error: " + ex.Message);
    }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
    if (firstRender && !_hasRendered)
    {
    _hasRendered = true;

    try
    {
    var result = await localStorage.GetAsync<string>("access_token");
    var token = result.Success ? result.Value : null;

    if (!string.IsNullOrWhiteSpace(token))
    {
    Console.WriteLine(" Access Token: " + token);


    }
    }
    catch (Exception ex)
    {
    Console.WriteLine("Storage error: " + ex.Message);
    }

    StateHasChanged();
    }
    }
}


*@