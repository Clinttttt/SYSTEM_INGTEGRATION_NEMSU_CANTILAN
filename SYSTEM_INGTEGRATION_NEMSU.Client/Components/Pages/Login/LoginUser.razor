@page "/loginuser"
@using System.Security.Claims

@inject AuthStateProvider authStateProvider
@inject IAuthApiServices authServices
@inject ProtectedLocalStorage localStorage
@inject NavigationManager navigation
@rendermode InteractiveServer

<div class="relative flex justify-start h-screen content">
    <div class="absolute inset-0 bg-gradient-to-br from-amber-700/30 to-amber-100/30 rounded-full blur-3xl"></div>


    <div class="particle-container">
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
        <div class="particle"></div>
    </div>


    <div class="flex z-10 justify-start items-start w-[26%] left-6 absolute">
        <EditForm Model="@login" OnValidSubmit="@HandleLogin" FormName="LoginUser">
            <div class="flex flex-col w-full max-w-md p-8 gap-4 rounded-xl shadow-xl hover:shadow-2xl transition-shadow border-2 border-amber-400 bg-white/90 backdrop-blur">

                <div class="w-16 h-16 bg-gradient-to-t from-amber-500 to-amber-600 rounded-full flex items-center justify-center mx-auto">
                    <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                    </svg>
                </div>

                <h3 class="text-2xl font-semibold text-amber-600 text-center">Login</h3>
                <p class="text-gray-600 text-center text-sm mb-2">
                    Welcome back! <br /> Please sign in to continue.
                </p>


                <div class="relative">
                    <span class="absolute inset-y-0 left-0 flex items-center pl-2">
                        <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1"
                            d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                        </svg>
                    </span>
                    <input @bind="login.UserName" type="text" placeholder="Username"
                    class="w-full pl-10 border p-2 rounded border-amber-600 focus:border-amber-600 focus:ring-2 focus:ring-amber-600 outline-none" />
                    <span class="absolute left-3 top-2.5 text-amber-500">
                        <i class="fas fa-user"></i>
                    </span>
                </div>


                <div class="relative">
                    <span class="absolute inset-y-0 left-0 flex items-center pl-2 ">
                        <svg class="w-5 h-5 text-gray-400 " fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                        </svg>
                    </span>

                    <input  @bind="login.Password" type="password" placeholder="Password"
                    class="w-full pl-10 border p-2 rounded border-amber-600 focus:border-amber-600 focus:ring-2 focus:ring-amber-600 outline-none" />
                    <span class="absolute left-3 top-2.5 text-amber-500">
                        <i class="fas fa-lock"></i>
                    </span>
                </div>


                <button type="submit" class="btn w-full bg-gradient-to-t from-amber-500 to-amber-600 text-white py-3 rounded-lg font-medium hover:from-amber-600 hover:to-amber-700 transition-all text-center mt-2">
                    Login Now
                </button>


                <div class="flex justify-between text-sm mt-2">
                    <a href="#" class="text-amber-600 hover:underline">Forgot password?</a>
                    <a href="/register" class="text-amber-600 hover:underline">Sign up</a>
                </div>
            </div>
        </EditForm>
    </div>


    <div class="absolute right-0 top-0 h-full w-[70%] z-0">
        <img src="/img/nemsu_gate.png" class="object-cover w-full h-full" style="border-left: solid 5px rgb(240, 134, 0)" />


        <div class="absolute inset-0 bg-gradient-to-b from-black/40 via-black/20 to-black/50"></div>

        <div class="absolute top-12 left-1/2 transform -translate-x-1/2 z-10">
            <div class="bg-white/55  backdrop-blur-sm rounded-2xl p-6 shadow-2xl border-2 border-cyan-600">
                <div class="flex items-center gap-4">
                    <div class="w-20 h-20  rounded-full flex items-center justify-center">
                        <img src="/img/logo_nemsu.png" />
                    </div>
                    <div>
                        <h2 class="text-xl font-bold text-cyan-900">North Eastern Mindanao</h2>
                        <h2 class="text-xl font-bold text-cyan-900">State University Cantilan</h2>
                        <p class="text-sm text-gray-600 mt-1">Student Services Portal</p>
                    </div>
                </div>
            </div>
        </div>


        <div class="absolute bottom-16 left-1/2 transform -translate-x-1/2 w-[90%] z-10">
            <div class="grid grid-cols-3 gap-6">

                <div class="bg-white/55   backdrop-blur-sm rounded-xl p-6 shadow-xl border-2 border-amber-600 hover:shadow-2xl transition-all hover:scale-105">
                    <div class="w-12 h-12  bg-gradient-to-br from-amber-500 to-orange-500 rounded-lg flex items-center justify-center mb-4">
                        <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M13 10V3L4 14h7v7l9-11h-7z" />
                        </svg>
                    </div>
                    <h3 class="text-lg font-bold text-gray-800 mb-2">Quick Access</h3>
                    <p class="text-sm text-stone-800">Easily access registration forms, requirements, and application status</p>
                </div>


                <div class="bg-white/55   backdrop-blur-sm rounded-xl p-6 shadow-xl border-2 border-cyan-600 hover:shadow-2xl transition-all hover:scale-105">
                    <div class="w-12 h-12 bg-gradient-to-br from-cyan-500 to-teal-600 rounded-lg flex items-center justify-center mb-4">
                        <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                    </div>
                    <h3 class="text-lg font-bold text-gray-800 mb-2">24/7 Available</h3>
                    <p class="text-sm text-stone-800">Access your student services anytime, anywhere with our portal</p>
                </div>


                <div class="bg-white/55 backdrop-blur-sm rounded-xl p-6 shadow-xl border-2 border-teal-600 hover:shadow-2xl transition-all hover:scale-105">
                    <div class="w-12 h-12 opacity-100 bg-gradient-to-br from-green-500 to-teal-600 rounded-lg flex items-center justify-center mb-4">
                        <svg class="w-6 h-6 opacity-100 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                            d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                        </svg>
                    </div>
                    <h3 class="text-lg font-bold text-gray-800 mb-2">Secure Platform</h3>
                    <p class="text-sm text-stone-800">Your data is protected with enterprise-level security measures</p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public LoginDto login { get; set; } = new();
    public string? Error { get; set; }
    private bool Hasrender = false;
    private IEnumerable<Claim> claims = [];

    protected override async Task OnInitializedAsync()
    {
        var state = await authStateProvider.GetAuthenticationStateAsync();
        claims = state.User.Claims;
      
    }
    private async Task HandleLogin()
    {
        if (string.IsNullOrEmpty(login.UserName) || string.IsNullOrEmpty(login.Password))
        {
            Error = "Empty bai";
            return;
        }
        try
        {
            var results = await authServices.LoginAsync(login);
            if (results is null)
            {
                Error = "Invalid Username or Password";
                return;
            }
            await localStorage.SetAsync("AccessToken", results.AccessToken!);
            await localStorage.SetAsync("RefreshToken", results.RefreshToken!);
            await Task.Delay(100);
            authStateProvider.NotifyUserChanged();
            await Task.Delay(500);
            navigation.NavigateTo("/FillOutRegistration");

        }
        catch (Exception ex)
        {
            Console.WriteLine("Something went wrong:" + ex.Message);
        }     
    }
    protected override async Task OnAfterRenderAsync( bool render)
    {
        if(render && !Hasrender)
        {
            Hasrender = true;
            try
            {           
                await authServices.TryRefreshTokenAsync();
                var accesstoken = await localStorage.GetAsync<string>("AccessToken");
                var response = accesstoken.Success ? accesstoken.Value : null;  
                if(response is not null)
                {
                    Console.WriteLine("AccessToken" + response);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error" + ex.Message);
            }
            StateHasChanged();
        }
    }



}

