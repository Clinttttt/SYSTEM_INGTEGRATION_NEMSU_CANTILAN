@rendermode InteractiveServer
@inject IEnrollmentApiServices enrollmentApi

@page "/enrollment"


<div class="relative h-screen content overflow-hidden ">
    <div class="drawer lg:drawer-open h-screen">
        <input id="my-drawer-2" type="checkbox" class="drawer-toggle" />
        <div class="drawer-content flex flex-col items-center justify-center">

            <label for="my-drawer-2" class="btn btn-primary drawer-button lg:hidden">
                Open drawer
            </label>





            <div class="flex justify-center items-start w-full p-4 overflow-auto scrollbar-hide h-screen ">
                <div class="w-full h-full overflow-y-auto scrollbar-hide pb-18">

                    <div class="mb-8">
                        <div class="flex items-center gap-4 mb-2">
                            <NavLink href="/studentmenu" class="btn btn-circle btn-ghost hover:bg-cyan-100 transition-colors">
                                <svg class="w-5 h-5 text-cyan-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                                </svg>
                            </NavLink>
                            <div>
                                <h1 class="text-3xl font-bold text-gray-600 flex items-center gap-3">
                                    <span class="text-cyan-600">📚</span>
                                    Available Courses
                                </h1>
                                <p class="text-gray-500 text-sm mt-1">Select courses you want to enroll in for the semester</p>
                            </div>
                        </div>
                    </div>


                    <div class="mb-8 flex gap-4 items-center">
                        <div class="relative flex-1 p-1">
                            <svg class="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                            </svg>
                            <input type="text"
                            @bind="SearchQuery"
                            @bind:event="oninput"
                            @onkeyup="HandlingQuery"
                            placeholder="Search courses by Name or Course Code..."
                            class="w-full pl-12 pr-4 py-3 border-2 border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-cyan-500 focus:border-transparent transition-all shadow-sm hover:shadow-md" />
                        </div>
                        <!--  <button class="px-6 py-3 bg-white border-2 border-gray-200 rounded-xl hover:border-cyan-500 hover:text-cyan-600 transition-all font-medium flex items-center gap-2 shadow-sm hover:shadow-md">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z" />
                        </svg>
                        Filter
                        </button>-->
                    </div>
                    @if (!hasrender)
                    {
                        <div class="flex justify-center items-center py-32">
                            <div class="text-center">
                                <div class="relative">
                                    <div class="w-20 h-20 border-4 border-cyan-200 border-t-cyan-600 rounded-full animate-spin mx-auto"></div>
                                </div>
                                <p class="text-gray-600 mt-6 text-lg font-semibold">Loading Course...</p>
                            </div>
                        </div>
                    }
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                        @if (filtered is not null)
                        {

                            foreach (var C in filtered)
                            {
                                <!--    <div class="bg-white rounded-lg shadow-md hover:shadow-xl transition-shadow duration-300 overflow-hidden border border-gray-200 opacity-85">
                                <div class="bg-gradient-to-r from-gray-400 to-gray-500 h-32 flex items-center justify-center">
                                <div class="text-white text-5xl">⚗️</div>
                                </div>
                                <div class="p-5">
                                <h3 class="text-xl font-bold text-gray-800 mb-2">General Chemistry</h3>
                                <p class="text-sm text-gray-600 mb-3">SCI 101 • 3 Units • <span class="text-gray-600 font-medium">Natural Sciences</span></p>
                                <p class="text-gray-700 text-sm mb-4">Introduction to chemical principles and laboratory techniques.</p>
                                <div class="flex items-center justify-between mb-4">
                                <span class="text-xs bg-red-100 text-red-700 px-3 py-1 rounded-full">Full</span>
                                <span class="text-xs text-gray-500">40/40 slots</span>
                                </div>
                                <button class="w-full bg-gray-400 text-white py-2 rounded-lg cursor-not-allowed" disabled>
                                Course Full
                                </button>
                                </div>
                                </div>-->



                                <div class="@(C.TotalEnrolled == C.MaxCapacity ? "opacity-85" : "opacity-100 hover:scale-105 hover:-translate-y-1  hover:shadow-2xl transition-all duration-500") group bg-white rounded-2xl shadow-lg overflow-hidden border border-gray-100 flex flex-col">

                                    <div class="@(C.TotalEnrolled == C.MaxCapacity ? "bg-gradient-to-r from-gray-400 to-gray-500" : $"{GetGradientClass(C.Category?.Color)}") h-40 flex items-center justify-center relative overflow-hidden">

                                        <div class="absolute top-0 right-0 w-32 h-32 bg-white opacity-10 rounded-full -mr-16 -mt-16"></div>
                                        <div class="absolute bottom-0 left-0 w-24 h-24 bg-white opacity-10 rounded-full -ml-12 -mb-12"></div>


                                        <div class="relative z-10 text-7xl transform group-hover:scale-110 transition-transform duration-300 drop-shadow-lg">
                                            @C.Category?.Icon
                                        </div>
                                    </div>

                                    <div class="p-5 flex-1 flex flex-col">

                                        <h3 class="text-sm font-bold text-gray-700 mb-2  @(C.TotalEnrolled == C.MaxCapacity ? "text-gray-600" : "group-hover:text-teal-600 transition-color")  s min-h-[2.5rem]">
                                            @C.Title
                                        </h3>


                                        <div class="flex items-center gap-2 text-sm text-gray-600 mb-3 flex-wrap">
                                            <span class="flex items-center gap-1">
                                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                                                </svg>
                                                @C.CourseCode
                                            </span>
                                            <span class="text-gray-400">•</span>
                                            <span class="flex items-center gap-1">
                                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                                                </svg>
                                                @C.Unit Units
                                            </span>
                                            <span class="text-gray-400">•</span>
                                            <span class="@(C.TotalEnrolled == C.MaxCapacity ? "text-gray-600" : $"{GetCategoryTextColor(C.Category?.Color)}")  font-semibold text-[11px]">
                                                @C.Department?.GetDisplayName()
                                            </span>
                                        </div>


                                        <div class="flex items-center justify-between mb-4 pb-4 border-b border-gray-100">
                                            <span class="flex items-center gap-1 text-[10px]      @(C.TotalEnrolled == C.MaxCapacity ? "text-red-500" : "text-emerald-700")">
                                                <svg class="w-2.5 h-2.5" fill="currentColor" viewBox="0 0 20 20">
                                                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                                                </svg>
                                                @(C.TotalEnrolled == C.MaxCapacity ? "Full" : "Available")
                                            </span>

                                            <span class="flex items-center gap-1.5 text-sm text-gray-600 font-medium">
                                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                                                </svg>
                                                <span class="  @(C.TotalEnrolled == C.MaxCapacity ? "text-red-500" : "text-teal-600 ") font-bold">@C.TotalEnrolled</span>/@C.MaxCapacity slots
                                            </span>
                                        </div>


                                        <div class="mt-auto">
                                            <label for="@(C.TotalEnrolled == C.MaxCapacity ? "" : "my_modal_5")" @onclick="()=> OpenModal(C.Id)"
                                            class=" @(C.TotalEnrolled == C.MaxCapacity ? "bg-gray-400 cursor-not-allowed" : $" rounded-xl hover:shadow-lg hover:scale-[1.02] transition-all duration-300 cursor-pointer bg-gradient-to-r {GetButtonGradient(C.Category?.Color)}") w-full relative btn border-0 bg-gradient-to-r  text-white py-3 rounded-xl  font-semibold text-xs flex items-center justify-center gap-2 group ">

                                                <svg class="w-5 h-5 left-2 absolute group-hover:rotate-12 transition-transform" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                                                    <path stroke-linecap="round" stroke-linejoin="round" d="M15.182 15.182a4.5 4.5 0 0 1-6.364 0M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0ZM9.75 9.75c0 .414-.168.75-.375.75S9 10.164 9 9.75 9.168 9 9.375 9s.375.336.375.75Zm-.375 0h.008v.015h-.008V9.75Zm5.625 0c0 .414-.168.75-.375.75s-.375-.336-.375-.75.168-.75.375-.75.375.336.375.75Zm-.375 0h.008v.015h-.008V9.75Z" />
                                                </svg>

                                                @(C.TotalEnrolled == C.MaxCapacity ? "Course Full" : $"Enroll for  ₱{@C.Cost}.00")

                                            </label>
                                        </div>
                                    </div>
                                </div>

                            }
                        }

                    </div>




                </div>
            </div>






            <input type="checkbox" id="my_modal_5" class="modal-toggle" />


            <div class="modal">
                <div class="modal-box z-10 rounded-xl shadow-2xl max-w-md bg-cyan-50">

                    <div class="text-center mb-6">
                        <div class="inline-flex items-center justify-center w-16 h-16 bg-blue-100 rounded-full mb-4">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-cyan-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                        </div>
                        <h3 class="text-2xl font-bold text-gray-800 mb-2">Proceed with Enrollment?</h3>
                        <p class="text-gray-600 text-sm">Review your course selection before confirming</p>
                    </div>


                    <div class="modal-action mt-6 flex flex-col sm:flex-row gap-3 justify-center">
                        <div class="flex flex-col sm:flex-row gap-3 w-full">
                            <NavLink href="@($"/enrollmentdetails/{SelectedCourse}")" class="btn btn-outline btn-primary flex-1 rounded-lg hover:bg-teal-700 hover:text-white transition-all">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                </svg>
                                View Details
                            </NavLink>
                            <label for="my_modal_5" class="btn btn-outline btn-primary flex-1 rounded-lg hover:bg-cyan-700 hover:text-white transition-all">
                                Cancel
                            </label>
                        </div>
                    </div>


                    <label for="my_modal_5" class="btn btn-sm btn-circle btn-ghost absolute right-3 top-3 hover:bg-gray-100">✕</label>
                </div>


                <label class="modal-backdrop" for="my_modal_5">Close</label>
            </div>


        </div>
        <div class="drawer-side">
            <label for="my-drawer-2" aria-label="close sidebar" class="drawer-overlay"></label>
            <ul class="menu min-h-full w-62 p-4 text-white" style="background: radial-gradient(at 0% 0%, rgb(6, 182, 212) 0px, transparent 50%), radial-gradient(at 100% 100%, rgb(14, 116, 144) 0px, transparent 50%), radial-gradient(at 100% 0%, rgb(8, 145, 178) 0px, transparent 50%), radial-gradient(at 0% 100%, rgb(21, 94, 117) 0px, transparent 50%), rgb(17, 24, 39);">

                <li class="mx-auto mb-4">
                    <div class="w-[92px] h-[92px]  border-4 border-amber-500 rounded-full  flex items-center justify-center overflow-hidden bg-white">
                        <img src="/img/student_logo.jpg" class="w-full h-full object-contain" />
                    </div>
                </li>
                <li><a class="text-white text-2xl font-light btn btn-outline btn-dash btn-primary">Enrollment</a></li>


                <li class="mt-10"><NavLink href="/paymenthistory" class="text-white text-md btn-[40%] font-semibold btn btn-outline btn-primary">Payment History</NavLink></li>
                <li class="mt-2"><a class="text-white text-md btn-[40%] font-semibold btn btn-outline btn-primary">Settings</a></li>
                <li class="mt-2"><a class="text-white text-md btn-[40%] font-semibold btn btn-outline btn-primary">Logout</a></li>

                <li class="mt-10"><NavLink href="/profileinformation" class="text-white text-md btn-[40%] font-semibold btn btn-outline btn-primary">Profile</NavLink></li>
                <li class="mt-2"><NavLink href="/announcement" class="text-white text-md btn-[40%] font-semibold btn btn-outline btn-primary">Announcements</NavLink></li>
                <li class="mt-2"><NavLink href="/enrolledcourse" class="text-white text-md btn-[40%] font-semibold btn btn-outline btn-primary">Enrolled Course</NavLink></li>
            </ul>
        </div>
    </div>





</div>



@code {

    public IEnumerable<CourseDto>? course { get; set; }
    public List<StudentStats>? coursesStats { get; set; }
    public bool hasrender = false;
    private string? Error { get; set; }
    public string? Status { get; set; }
    public Guid SelectedCourse { get; set; }

    public List<CourseDto>? filtered { get; set; }
    public string SearchQuery = "";
    protected override async Task OnAfterRenderAsync(bool firstrender)
    {
        if (!hasrender && firstrender)
        {
            hasrender = true;
            course = await enrollmentApi.DisplayCourseAsync();
            filtered = course?.ToList();
            StateHasChanged();
        }
    }
    public void HandlingQuery()
    {
        if (string.IsNullOrWhiteSpace(SearchQuery))
        {
            filtered = course?.ToList();
        }
        else
        {
            var query = SearchQuery.ToLower();
            filtered = course?.Where(s =>
                 s.Title!.ToLower().Contains(query) || s.CourseCode!.ToLower().Contains(query)).ToList();
        }
        StateHasChanged();
    }




    public async Task OpenModal(Guid CourseId)
    {
        SelectedCourse = CourseId;
    }




    private Dictionary<string, string> colorGradients = new()
        {
            ["teal"] = "bg-gradient-to-br from-teal-400 via-teal-500 to-cyan-600",
            ["blue"] = "bg-gradient-to-br from-blue-400 via-blue-500 to-indigo-600",
            ["green"] = "bg-gradient-to-br from-green-400 via-green-500 to-emerald-600",
            ["orange"] = "bg-gradient-to-br from-orange-400 via-orange-500 to-red-500",
            ["purple"] = "bg-gradient-to-br from-purple-400 via-purple-500 to-pink-500",
            ["indigo"] = "bg-gradient-to-br from-indigo-400 via-indigo-500 to-blue-600",
            ["pink"] = "bg-gradient-to-br from-pink-400 via-pink-500 to-rose-500"
        };

    private Dictionary<string, string> buttonGradients = new()
        {
            ["teal"] = "from-teal-500 to-cyan-600 hover:from-teal-600 hover:to-cyan-700",
            ["blue"] = "from-blue-500 to-indigo-600 hover:from-blue-600 hover:to-indigo-700",
            ["green"] = "from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700",
            ["orange"] = "from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600",
            ["purple"] = "from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600",
            ["indigo"] = "from-indigo-500 to-blue-600 hover:from-indigo-600 hover:to-blue-700",
            ["pink"] = "from-pink-500 to-rose-500 hover:from-pink-600 hover:to-rose-600"
        };

    private Dictionary<string, string> categoryTextColors = new()
        {
            ["teal"] = "text-teal-600",
            ["blue"] = "text-blue-600",
            ["green"] = "text-green-600",
            ["orange"] = "text-orange-600",
            ["purple"] = "text-purple-600",
            ["indigo"] = "text-indigo-600",
            ["pink"] = "text-pink-600"
        };

    private string GetGradientClass(string? color)
    {
        return color != null && colorGradients.ContainsKey(color)
            ? colorGradients[color]
            : "bg-gradient-to-br from-gray-400 via-gray-500 to-gray-600";
    }

    private string GetButtonGradient(string? color)
    {
        return color != null && buttonGradients.ContainsKey(color)
            ? buttonGradients[color]
            : "from-gray-500 to-gray-600 hover:from-gray-600 hover:to-gray-700";
    }

    private string GetCategoryTextColor(string? color)
    {
        return color != null && categoryTextColors.ContainsKey(color)
            ? categoryTextColors[color]
            : "text-gray-600";
    }
}












<!--
                        <div class="bg-white/45 rounded-lg shadow-md hover:shadow-xl transition-shadow duration-300 overflow-hidden border border-gray-200">
                            <div class="bg-gradient-to-r from-blue-500 to-blue-600 h-32 flex items-center justify-center">
                                <div class="text-white text-5xl">🌐</div>
                            </div>
                            <div class="p-5">
                                <h3 class="text-xl font-bold text-gray-800 mb-2">Networking Fundamentals</h3>
                                <p class="text-sm text-gray-600 mb-3">CS 201 • 3 Units • <span class="text-blue-600 font-medium">Computer Science</span></p>
                                <p class="text-gray-700 text-sm mb-4">Learn the basics of computer networks and network architecture.</p>
                                <div class="flex items-center justify-between mb-4">
                                    <span class="text-xs bg-yellow-100 text-yellow-700 px-3 py-1 rounded-full">Limited</span>
                                    <span class="text-xs text-gray-500">48/50 slots</span>
                                </div>
                                <button class="w-full bg-teal-600 text-white py-2 rounded-lg hover:bg-teal-700 transition-colors">
                                    Enroll Now
                                </button>
                            </div>
                        </div>


-->
<!--    <div class="bg-white rounded-lg shadow-md hover:shadow-xl transition-shadow duration-300 overflow-hidden border border-gray-200 opacity-85">
        <div class="bg-gradient-to-r from-gray-400 to-gray-500 h-32 flex items-center justify-center">
            <div class="text-white text-5xl">⚗️</div>
        </div>
        <div class="p-5">
            <h3 class="text-xl font-bold text-gray-800 mb-2">General Chemistry</h3>
            <p class="text-sm text-gray-600 mb-3">SCI 101 • 3 Units • <span class="text-gray-600 font-medium">Natural Sciences</span></p>
            <p class="text-gray-700 text-sm mb-4">Introduction to chemical principles and laboratory techniques.</p>
            <div class="flex items-center justify-between mb-4">
                <span class="text-xs bg-red-100 text-red-700 px-3 py-1 rounded-full">Full</span>
                <span class="text-xs text-gray-500">40/40 slots</span>
            </div>
            <button class="w-full bg-gray-400 text-white py-2 rounded-lg cursor-not-allowed" disabled>
                Course Full
            </button>
        </div>
    </div>-->
